import{I as n}from"./chunks/IframeToggle.DSWNJ8Jo.js";import{c as t,j as s,I as e,a1 as i,a,o as l}from"./chunks/framework.C7bcE4J6.js";/* empty css                                                                            */const p=i("",9),r={class:"tip custom-block"},k=i("",2),h=i("",2),d=s("h2",{id:"exempel-2-generisk-funktion-for-att-hitta-det-storsta-vardet",tabindex:"-1"},[a("Exempel 2: Generisk Funktion för att hitta det största värdet "),s("a",{class:"header-anchor",href:"#exempel-2-generisk-funktion-for-att-hitta-det-storsta-vardet","aria-label":'Permalink to "Exempel 2: Generisk Funktion för att hitta det största värdet"'},"​")],-1),o={class:"tip custom-block"},g=i("",2),E=s("p",null,[s("strong",null,"Förklaring"),a(":")],-1),c=s("ul",null,[s("li",null,[a("Funktionen "),s("em",null,[s("strong",null,"get_max")]),a(" tar emot två argument av generisk typ T och returnerar det största värdet.")]),s("li",null,"Den fungerar med både heltal, flyttal och strängar eftersom vi använder generiska typer."),s("li",null,"För strängar görs jämförelsen enligt alfabetisk ordning.")],-1),y=s("h2",{id:"exempel-3-en-generisk-klass",tabindex:"-1"},[a("Exempel 3: En generisk klass "),s("a",{class:"header-anchor",href:"#exempel-3-en-generisk-klass","aria-label":'Permalink to "Exempel 3: En generisk klass"'},"​")],-1),m={class:"tip custom-block"},b=i("",2),u=i("",2),_=s("h2",{id:"exempel-4-generisk-klass-for-en-stack",tabindex:"-1"},[a("Exempel 4: Generisk Klass för en Stack "),s("a",{class:"header-anchor",href:"#exempel-4-generisk-klass-for-en-stack","aria-label":'Permalink to "Exempel 4: Generisk Klass för en Stack"'},"​")],-1),F=s("p",null,[a('En stack är en datastruktur som följer principen "'),s("strong",null,"Last In, First Out"),a('" ('),s("strong",null,"LIFO"),a("). Man kan skapa en generisk stack-klass som kan hantera olika typer av data.")],-1),v={class:"tip custom-block"},A=i("",2),f=i("",2),C=s("h2",{id:"sammanfattning",tabindex:"-1"},[a("Sammanfattning "),s("a",{class:"header-anchor",href:"#sammanfattning","aria-label":'Permalink to "Sammanfattning"'},"​")],-1),D=s("p",null,"Generiska metoder och klasser i Python gör det möjligt att skriva flexibel och återanvändbar kod som kan hantera flera olika datatyper. Genom att använda generiska typer kan vi skapa klasser och metoder som fungerar med olika typer av data utan att behöva skriva om koden. Detta gör våra program mer flexibla och lättare att underhålla.",-1),T=s("p",null,"Generiska typer är särskilt användbara när vi inte vet vilken typ av data vi kommer att arbeta med, eller när vi vill att vår kod ska kunna fungera med flera typer av data utan att begränsas till en specifik typ.",-1),G=JSON.parse('{"title":"Generiska metoder och klasser i Python","description":"","frontmatter":{"outline":[1,6]},"headers":[],"relativePath":"programming2/part11/index.md","filePath":"programming2/part11/index.md"}'),B={name:"programming2/part11/index.md"},N=Object.assign(B,{setup(x){return(S,V)=>(l(),t("div",null,[p,s("div",r,[k,e(n),h]),d,s("div",o,[g,e(n),E,c]),y,s("div",m,[b,e(n),u]),_,F,s("div",v,[A,e(n),f]),C,D,T]))}});export{G as __pageData,N as default};
