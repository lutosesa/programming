import{I as n}from"./chunks/IframeToggle.CDn7bRTF.js";import{c as t,j as s,I as e,a1 as i,a,o as l}from"./chunks/framework.on-pe4wI.js";/* empty css                                                                            */const p=i('<h1 id="generiska-metoder-och-klasser-i-python" tabindex="-1">Generiska metoder och klasser i Python <a class="header-anchor" href="#generiska-metoder-och-klasser-i-python" aria-label="Permalink to &quot;Generiska metoder och klasser i Python&quot;">​</a></h1><h2 id="inledning" tabindex="-1">Inledning <a class="header-anchor" href="#inledning" aria-label="Permalink to &quot;Inledning&quot;">​</a></h2><p>I Python kan vi ibland vilja <strong>skapa funktioner eller klasser som kan hantera olika typer av data</strong> utan att behöva skriva om koden för varje typ. <strong>Generiska metoder och klasser</strong> är verktyg som gör detta möjligt. De hjälper oss att skapa flexibla och återanvändbara program som kan <strong>fungera med olika typer av data</strong>.</p><h2 id="vad-ar-generiska-metoder-och-klasser" tabindex="-1">Vad är Generiska Metoder och Klasser? <a class="header-anchor" href="#vad-ar-generiska-metoder-och-klasser" aria-label="Permalink to &quot;Vad är Generiska Metoder och Klasser?&quot;">​</a></h2><p><strong>Generiska metoder och klasser är ett sätt att skapa kod som kan fungera med flera olika datatyper</strong>. Istället för att behöva specificera en exakt datatyp, som till exempel heltal (int) eller flyttal (float), kan vi använda generiska typer. Det gör att vi kan skriva mer <strong>allmän och flexibel kod</strong> som kan användas med många olika typer.</p><p>Det här konceptet är användbart när vi inte vill begränsa vår kod till att bara fungera med en viss typ av data.</p><h2 id="viktiga-begrepp" tabindex="-1">Viktiga Begrepp <a class="header-anchor" href="#viktiga-begrepp" aria-label="Permalink to &quot;Viktiga Begrepp&quot;">​</a></h2><ol><li><p><span class="a">Generiska Klasser</span>: En generisk klass är en klass som kan <strong>fungera med vilken datatyp som helst</strong>. Vi specificerar inte datatypen när vi skapar klassen, utan den kan anpassas efter behov.</p></li><li><p><span class="a">Generiska Metoder</span>: Precis som klasser, kan även metoder vara generiska. Det betyder att en metod kan <strong>ta emot argument av olika typer</strong> och arbeta med dem utan att behöva veta exakt vilken typ de är på förhand.</p></li></ol><h2 id="exempel-1-en-enkel-generisk-funktion" tabindex="-1">Exempel 1: En enkel generisk funktion <a class="header-anchor" href="#exempel-1-en-enkel-generisk-funktion" aria-label="Permalink to &quot;Exempel 1: En enkel generisk funktion&quot;">​</a></h2>',9),r={class:"tip custom-block"},k=i(`<p class="custom-block-title">Här ska vi skapa en funktion som kan fungera med olika typer av data.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa en generisk typ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;T&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Funktion returnerar inte något (-&gt; None)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value: T) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Anropa funktionen med olika typer av data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">print_value(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Heltal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">print_value(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hej&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Sträng</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">print_value(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Flyttal</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,2),h=i("<p><strong>Förklaring</strong>:</p><ul><li>Vi importerar <strong>TypeVar</strong> från biblioteket <strong>typing</strong> som låter oss <strong>skapa en generisk typ</strong>, bokstaven <strong>T</strong> som står för <strong>Type</strong>.</li><li>Funktionen <em><strong>print_value</strong></em> tar emot ett argument <strong>value</strong> som kan vara vilken typ som helst (tack vare <strong>T</strong>).</li><li>Vi anropar sedan funktionen med ett heltal, en sträng och ett flyttal. Funktionen fungerar med alla typer eftersom vi använder generiska typer.</li></ul>",2),d=s("h2",{id:"exempel-2-generisk-funktion-for-att-hitta-det-storsta-vardet",tabindex:"-1"},[a("Exempel 2: Generisk Funktion för att hitta det största värdet "),s("a",{class:"header-anchor",href:"#exempel-2-generisk-funktion-for-att-hitta-det-storsta-vardet","aria-label":'Permalink to "Exempel 2: Generisk Funktion för att hitta det största värdet"'},"​")],-1),o={class:"tip custom-block"},g=i(`<p class="custom-block-title">Vi skapar en generisk funktion som jämför och hittar det största värdet oavsett vilken typ av data vi har.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa en generisk typ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;T&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Funktion för att hitta största värdet</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: T, b: T) -&gt; T:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Testa funktionen med olika typer</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(get_max(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Heltal: 20</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(get_max(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.71</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Flyttal: 3.14</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(get_max(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;äpple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;banan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Strängar (alfabetisk ordning): banan</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,2),E=s("p",null,[s("strong",null,"Förklaring"),a(":")],-1),c=s("ul",null,[s("li",null,[a("Funktionen "),s("em",null,[s("strong",null,"get_max")]),a(" tar emot två argument av generisk typ T och returnerar det största värdet.")]),s("li",null,"Den fungerar med både heltal, flyttal och strängar eftersom vi använder generiska typer."),s("li",null,"För strängar görs jämförelsen enligt alfabetisk ordning.")],-1),y=s("h2",{id:"exempel-3-en-generisk-klass",tabindex:"-1"},[a("Exempel 3: En generisk klass "),s("a",{class:"header-anchor",href:"#exempel-3-en-generisk-klass","aria-label":'Permalink to "Exempel 3: En generisk klass"'},"​")],-1),m={class:"tip custom-block"},b=i(`<p class="custom-block-title">Nu ska vi skapa en generisk klass som kan hantera olika typer av data.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar, Generic</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa en generisk typ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;T&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa en generisk klass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Generic[T]):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, content: T):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Funktion returnerar vilken typ som helst (-&gt; T)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self) -&gt; T:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.content</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa objekt av olika typer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int_box </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Box(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Box för heltal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str_box </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Box(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hej&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Box för sträng</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Använd metoderna</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(int_box.get_content())   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skriver ut 123</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str_box.get_content())   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skriver ut &quot;Hej&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,2),u=i("<p><strong>Förklaring</strong>:</p><ul><li>Vi använder <strong>TypeVar</strong> och <strong>Generic</strong> för att skapa en generisk klass <strong>Box</strong> som kan innehålla data av vilken typ som helst.</li><li>När vi skapar ett objekt av typen <strong>Box</strong>, kan vi specificera vilken typ vi vill använda (t.ex. heltal eller sträng).</li><li>Metoden <em><strong>get_content</strong></em> returnerar innehållet i boxen, oavsett vilken typ den är.</li></ul>",2),_=s("h2",{id:"exempel-4-generisk-klass-for-en-stack",tabindex:"-1"},[a("Exempel 4: Generisk Klass för en Stack "),s("a",{class:"header-anchor",href:"#exempel-4-generisk-klass-for-en-stack","aria-label":'Permalink to "Exempel 4: Generisk Klass för en Stack"'},"​")],-1),F=s("p",null,[a('En stack är en datastruktur som följer principen "'),s("strong",null,"Last In, First Out"),a('" ('),s("strong",null,"LIFO"),a("). Man kan skapa en generisk stack-klass som kan hantera olika typer av data.")],-1),v={class:"tip custom-block"},A=i(`<p class="custom-block-title">Exempel</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar, Generic, List</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa en generisk typ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeVar(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;T&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generisk stack-klass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Generic[T]):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items: List[T] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, item: T) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items.append(item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self) -&gt; T:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items.pop()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.items) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa och använda stackar med olika typer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int_stack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Stack[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int_stack.push(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int_stack.push(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(int_stack.pop())    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skriver ut: 20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str_stack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Stack[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str_stack.push(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str_stack.push(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Generics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str_stack.pop())    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skriver ut: &quot;Generics&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,2),f=i("<p><strong>Förklaring</strong>:</p><ul><li><strong>Stack</strong>-klassen är generisk och kan hantera vilken typ som helst (specificeras när vi skapar objekt).</li><li>Metoderna <em><strong>push</strong></em> och <em><strong>pop</strong></em> används för att <strong>lägga till</strong> och <strong>ta bort</strong> element från stacken, och <em><strong>is_empty</strong></em> kontrollerar om stacken är tom.</li><li>Det skapas två olika stackar, en för heltal och en för strängar.</li></ul>",2),C=s("h2",{id:"sammanfattning",tabindex:"-1"},[a("Sammanfattning "),s("a",{class:"header-anchor",href:"#sammanfattning","aria-label":'Permalink to "Sammanfattning"'},"​")],-1),D=s("p",null,"Generiska metoder och klasser i Python gör det möjligt att skriva flexibel och återanvändbar kod som kan hantera flera olika datatyper. Genom att använda generiska typer kan vi skapa klasser och metoder som fungerar med olika typer av data utan att behöva skriva om koden. Detta gör våra program mer flexibla och lättare att underhålla.",-1),T=s("p",null,"Generiska typer är särskilt användbara när vi inte vet vilken typ av data vi kommer att arbeta med, eller när vi vill att vår kod ska kunna fungera med flera typer av data utan att begränsas till en specifik typ.",-1),G=JSON.parse('{"title":"Generiska metoder och klasser i Python","description":"","frontmatter":{"outline":[1,6]},"headers":[],"relativePath":"programming2/part11/index.md","filePath":"programming2/part11/index.md"}'),B={name:"programming2/part11/index.md"},N=Object.assign(B,{setup(x){return(S,V)=>(l(),t("div",null,[p,s("div",r,[k,e(n),h]),d,s("div",o,[g,e(n),E,c]),y,s("div",m,[b,e(n),u]),_,F,s("div",v,[A,e(n),f]),C,D,T]))}});export{G as __pageData,N as default};
