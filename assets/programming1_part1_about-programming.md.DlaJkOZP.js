import{_ as r,c as a,o as t,a1 as e,aO as n,aP as s,aQ as o,aR as i,aS as l,aT as g}from"./chunks/framework.DbFUhUXV.js";const P=JSON.parse('{"title":"Om programmering","description":"","frontmatter":{"outline":[1,6]},"headers":[],"relativePath":"programming1/part1/about-programming.md","filePath":"programming1/part1/about-programming.md"}'),m={name:"programming1/part1/about-programming.md"},k=e('<h1 id="om-programmering" tabindex="-1">Om programmering <a class="header-anchor" href="#om-programmering" aria-label="Permalink to &quot;Om programmering&quot;">​</a></h1><p>Programmeringen är <strong>processen</strong> att skriva exakta och detaljerade <strong>instruktioner</strong> på ett <strong>programmeringsspråk</strong>, så att en dator kan <strong>utföra en specifik uppgift</strong>. Dessa instruktioner kallas <strong>kod</strong>, och de är <strong>organiserade logiskt</strong> så att datorn kan förstå och utföra dem.</p><p><img src="'+n+'" alt=""></p><p>Istället för att behöva kommunicera med en dator med hjälp av komplex <strong>maskinkod</strong> kan programmerare använda <strong>högnivåprogrammeringsspråk</strong> som mer liknar mänskligt språk. Dessa språk är lättare att förstå och skriva, vilket gör att <strong>programmerare kan fokusera på logiken och designen</strong> i sina program snarare än att ta itu med detaljer på låg nivå.</p><h2 id="programmeringssprak" tabindex="-1">Programmeringsspråk <a class="header-anchor" href="#programmeringssprak" aria-label="Permalink to &quot;Programmeringsspråk&quot;">​</a></h2><p>Det är en <strong>uppsättning regler och symboler</strong> som gör att programmerare kan skriva <strong>instruktioner</strong> som en dator kan förstå och utföra. Dessa språk fungerar som mellanhänder mellan mänskligt språk, som vi använder för att kommunicera, och maskinspråk, som är den uppsättning binära instruktioner som en dator förstår direkt. <img src="'+s+'" alt=""></p><h2 id="olika-programmeringssprak" tabindex="-1">Olika programmeringsspråk <a class="header-anchor" href="#olika-programmeringssprak" aria-label="Permalink to &quot;Olika programmeringsspråk&quot;">​</a></h2><p>Det finns massvis med olika programmeringsspråk (eller programspråk) att välja bland. Det finns faktiskt över hundra stycken varav ca ett tiotal är vanligt förekommande idag. Man kan lite slarvigt säga att alla programspråk är bra på något eller utvecklade för en viss tillämpning eller att fungera i en viss miljö. Detta i kombination med att vissa programspråk vidareutvecklats gör att det finns så många varianter på programspråk.</p><p>De största <strong>programspråken</strong> som man bör känna till är <strong>Assembler</strong>, <strong>C</strong>, <strong>C++</strong>, <strong>Java</strong>, <strong>C#</strong> och <strong>Python</strong>. Programspråken traditionellt brukar delas in i två kategorier, <strong>lågnivåspråk</strong> och <strong>högnivåspråk</strong>. Det finns även så kallade <strong>skript språk</strong> som <strong>PHP</strong>, <strong>Perl</strong>, <strong>ASP</strong>, <strong>JavaScript</strong>, <strong>Python</strong> med flera. <strong>Ett skriftspråk kompileras inte utan tolkas i en speciell miljö</strong>.</p><br><p><img src="'+o+'" alt=""></p><br><h3 id="lagnivasprak" tabindex="-1">Lågnivåspråk <a class="header-anchor" href="#lagnivasprak" aria-label="Permalink to &quot;Lågnivåspråk&quot;">​</a></h3><p>Till <strong>lågnivåspråk</strong> hör främst <strong>assembler</strong> men även <strong>C</strong> räknas idag som ett lågnivåspråk. Det som kännetecknar ett <strong>lågnivåspråk</strong> är att man skriver väldigt detaljerad kod som ligger väldigt nära det språk som datorn pratar (maskinkod). I Assembler t.ex. så byggs ett program upp instruktion för instruktion vilket kräver att man har god kännedom om hur processorn fungerar samt adressregistret. Detta gör det väldigt omständligt att skapa mer avancerade program. Fördelen är att programmeraren har full kontroll på vad som händer och att program skapade med lågnivåspråk blir väldigt resurssnåla och effektiva. Lågnivåspråk var det man använde för att utveckla program med för länge sedan (70-tal). I takt med att högnivåspråken blivit kraftfullare och kompilatorerna spottar ur sig allt bättre (optimerade) program så har användningen av lågnivåspråk minskat. Idag används lågnivåspråk endast för små inbyggda system och väldigt krävande delar av ett operativsystem.</p><p><img src="'+i+'" alt=""></p><h3 id="hognivasprak" tabindex="-1">Högnivåspråk <a class="header-anchor" href="#hognivasprak" aria-label="Permalink to &quot;Högnivåspråk&quot;">​</a></h3><p><strong>Högnivåspråk</strong> är betydligt kraftfullare än lågnivåspråk. Med detta menas att vi som programmerare kan åstadkomma mer med mindre ansträngning och det är ju helt perfekt/underbart. När man använder ett högnivåspråk så beskriver man mer vad som ska göras och inte exakt hur det ska göra. I alla fall så behöver vi inte veta på detaljnivå hur programmet vi skriver utförs. Detta är kompilatorns problem/jobb. De flesta moderna programspråken är objektorienterade. Vad detta innebär ska det inte gås igenom här utan i Programmering 2. Man bör dock känna till Objektorienterad programmering (Object Oriented Programming, OOP) och att det är ett sätt att strukturera och hantera kod som underlättar när man skapar större och mer avancerade program. Man kan bl.a. återanvända kod i större utsträckning.</p><h3 id="kallkod-och-maskinkod" tabindex="-1">Källkod och maskinkod <a class="header-anchor" href="#kallkod-och-maskinkod" aria-label="Permalink to &quot;Källkod och maskinkod&quot;">​</a></h3><p>Programmet finns i två format, <strong>källkod</strong> och <strong>maskinkod</strong> (ibland binärkod). Eftersom det är väldigt jobbigt för oss människor att skapa maskinkod direkt så skrivs (programmeras) programmen i källkod (ibland kort och gott kod). <strong>Källkod</strong> kan liknas vid ett matrecept och beskriver steg för steg vad som skall göras. Det är viktigt att källkoden skrivs korrekt och med rätt grammatik vilket kallas <strong>syntax</strong> och som beror på det programmeringsspråk som används. <strong>Källkod</strong> kan inte datorn förstå rakt av utan den måste översättas till <strong>maskinkod</strong> (<strong>kompileras</strong>) så att datorn kan köra programmet (kallas även <strong>exekvera</strong>). Programmet som översätter källkoden till maskinkod kallas för <strong>kompilator</strong>.</p><p><img src="'+l+'" alt=""></p><h3 id="enklaste-program" tabindex="-1">Enklaste Program <a class="header-anchor" href="#enklaste-program" aria-label="Permalink to &quot;Enklaste Program&quot;">​</a></h3><p>Ett program (dataprogram/datorprogram) kan beskrivas som <strong>ett i förväg bestämd serie med instruktioner som gör att det utförs en specifik uppgift</strong>.</p><details class="details custom-block"><summary>Klicka på mig för att se det enklaste programmet, det klassiska &quot;Hello, world!&quot; i Python!</summary><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></details><h2 id="varfor-programmering-ar-viktigt" tabindex="-1">Varför programmering är viktigt? <a class="header-anchor" href="#varfor-programmering-ar-viktigt" aria-label="Permalink to &quot;Varför programmering är viktigt?&quot;">​</a></h2><p>Programmeringen är viktig av flera grundläggande skäl:</p><ul><li>Det gör att komplexa problem kan delas upp i mindre, mer lättillgängliga steg, vilket underlättar en effektiv och effektiv lösning.</li><li>De flesta tekniska innovationer och framsteg i det moderna samhället är baserade på programmering, från mobilappar till artificiell intelligens.</li><li>Det underlättar automatiseringen av repetitiva och tråkiga uppgifter, förbättrar effektiviteten och minskar fel i manuella processer.</li><li>Det driver mjukvaruutveckling, som är en viktig punkt i alla branscher, från affärssystem till medicinska och underhållningsapplikationer.</li><li>Det är en viktig resurs för forskare, som använder programmering för att simulera fenomen, analysera data och modellera komplexa system.</li><li>Uppmuntrar problemlösning, logik och kreativitet, vilket är avgörande för utbildning och personlig utveckling.</li><li>Teknikindustrin är en av de viktigaste ekonomiska drivkrafterna, och programmering är en nyckelfärdighet i denna bransch.</li><li>Programmering tillämpas inom områden som medicin, hållbarhet och resursförvaltning för att ta itu med globala problem.</li></ul><p><img src="'+g+'" alt=""></p><h2 id="slutsats" tabindex="-1">Slutsats <a class="header-anchor" href="#slutsats" aria-label="Permalink to &quot;Slutsats&quot;">​</a></h2><p>Programmering är en kreativ process som kräver logiskt tänkande, problemlösning och precision. Det används inom en mängd olika områden, inklusive mjukvaruutveckling, datavetenskap, webbutveckling, spelutveckling, artificiell intelligens, och många andra. Olika programmeringsspråk används beroende på projektets behov och mål. Det är en kraftfull färdighet som spelar en central roll i den moderna teknikvärlden och har oändliga möjligheter att skapa innovativa lösningar och förbättra vår (digitala) värld.</p>',29),p=[k];function d(v,h,c,u,f,b){return t(),a("div",null,p)}const y=r(m,[["render",d]]);export{P as __pageData,y as default};
