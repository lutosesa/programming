/* empty css                                                                            */import{c as a,o as s,a1 as n}from"./chunks/framework.Bxcd0E85.js";const e=n(`<h1 id="python-abstrakta-klasser" tabindex="-1">Python Abstrakta klasser <a class="header-anchor" href="#python-abstrakta-klasser" aria-label="Permalink to &quot;Python Abstrakta klasser&quot;">​</a></h1><h2 id="inledning" tabindex="-1">Inledning <a class="header-anchor" href="#inledning" aria-label="Permalink to &quot;Inledning&quot;">​</a></h2><p>I Python, liksom i många andra programmeringsspråk, spelar abstrakta klasser en viktig roll i objektorienterad programmering (OOP). Abstrakta klasser är som ritningar för andra klasser. De definierar inte en fullständig implementering av en funktion, men ger en mall som kan användas och anpassas av andra klasser.</p><p>Abstrakta klasser kan vara användbara när du vill försäkra dig om att en viss struktur finns på plats i alla klasser som ärver från den abstrakta klassen, samtidigt som du lämnar detaljerna för hur vissa metoder fungerar åt de underordnade klasserna.</p><h2 id="vad-ar-en-abstrakt-klass" tabindex="-1">Vad är en abstrakt klass? <a class="header-anchor" href="#vad-ar-en-abstrakt-klass" aria-label="Permalink to &quot;Vad är en abstrakt klass?&quot;">​</a></h2><p>En abstrakt klass är en klass som <strong>inte kan instansieras direkt</strong>. Det betyder att du <strong>inte kan skapa ett objekt från den</strong>. Den fungerar som en <strong>bas</strong> för andra klasser och kan **innehålla en eller flera abstrakta metoder som måste implementeras i de underordnade klasserna.</p><p>I Python använder vi ett <strong>modulbibliotek</strong> som heter <strong>abc</strong> (<strong>Abstract Base Classes</strong>) för att <strong>skapa abstrakta klasser</strong>. Inom detta bibliotek finns en <a href="/programming/programming2/part10/decorator.html">dekorator</a> som kallas <em><strong>@abstractmethod</strong></em> för att <strong>markera en metod som abstrakt</strong>.</p><h2 id="_1-skapa-en-abstrakt-klass" tabindex="-1">1. Skapa en Abstrakt Klass <a class="header-anchor" href="#_1-skapa-en-abstrakt-klass" aria-label="Permalink to &quot;1. Skapa en Abstrakt Klass&quot;">​</a></h2><p>För att skapa en abstrakt klass i Python gör du följande:</p><ol><li>Importera modulen <strong>abc</strong> och klassen <strong>ABC</strong>.</li><li>Skapa en klass som <strong>ärver</strong> från <strong>ABC</strong>.</li><li>Deklarera <strong>abstrakta metoder</strong> med hjälp av <em><strong>@abstractmethod</strong></em>.</li></ol><div class="tip custom-block"><p class="custom-block-title">Exempel på abstrak klass och metod</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Definierar en abstrakt klass &#39;Djur&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Djur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # En abstrakt metod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ljud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><p>I exemplet ovan har vi skapat en abstrakt klass <strong>Djur</strong> med en abstrakt metod <em><strong>ljud</strong></em>. Notera att metoden <em><strong>ljud</strong></em> inte har någon kropp eller implementation (den använder bara pass), vilket gör den abstrakt.</p><h2 id="_2-arva-fran-en-abstrakt-klass" tabindex="-1">2. Ärva från en Abstrakt Klass <a class="header-anchor" href="#_2-arva-fran-en-abstrakt-klass" aria-label="Permalink to &quot;2. Ärva från en Abstrakt Klass&quot;">​</a></h2><p>Nu när vi har skapat en abstrakt klass, låt oss skapa en klass som ärver från Djur och implementerar den abstrakta metoden ljud.</p><div class="tip custom-block"><p class="custom-block-title">Implementring av den abstrakta medoden <em>ljud</em></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hund</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Djur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Implementerar den abstrakta metoden från Djur</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ljud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Voff!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Katt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Djur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Implementerar den abstrakta metoden från Djur</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ljud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mjau!&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div><p>Här ser vi två underordnade klasser, <strong>Hund</strong> och <strong>Katt</strong>, som båda ärver från den abstrakta klassen <strong>Djur</strong>. Eftersom de ärver från en abstrakt klass, måste de implementera metoden <em><strong>ljud</strong></em>. Annars skulle de inte vara kompletta och Python skulle ge ett felmeddelande.</p><h2 id="_3-instansiera-klasser" tabindex="-1">3. Instansiera Klasser <a class="header-anchor" href="#_3-instansiera-klasser" aria-label="Permalink to &quot;3. Instansiera Klasser&quot;">​</a></h2><p>När vi nu har implementerat den abstrakta metoden i de underordnade klasserna, kan vi <strong>skapa instanser av dem</strong> och <strong>använda deras metoder</strong>.</p><div class="tip custom-block"><p class="custom-block-title">Skapande av instanser/objekt och användning av dess metoder</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Skapa objekt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hund </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hund()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">katt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Katt()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Använd metoden &#39;ljud&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hund.ljud())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: Voff!</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(katt.ljud())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: Mjau!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><p>Vi kan dock <span class="c">INTE instansiera den abstrakta klassen direkt</span>:</p><div class="danger custom-block"><p class="custom-block-title">Detta ger ett fel!</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">djur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Djur()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><p><span class="c">Försöker vi göra detta, kommer Python att ge ett fel</span> eftersom <strong>Djur</strong> är en <strong>abstrakt klass</strong> och vi har <strong>inte implementerat dess abstrakta metoder i den</strong>.</p><h2 id="_4-varfor-anvanda-abstrakta-klasser" tabindex="-1">4. Varför använda Abstrakta Klasser? <a class="header-anchor" href="#_4-varfor-anvanda-abstrakta-klasser" aria-label="Permalink to &quot;4. Varför använda Abstrakta Klasser?&quot;">​</a></h2><p>Abstrakta klasser är <strong>användbara</strong> när du har en <strong>gemensam struktur</strong> som flera klasser ska följa. Här är några anledningar till att använda abstrakta klasser:</p><ul><li><strong>Struktur</strong>: Abstrakta klasser tvingar de underordnade klasserna att följa en viss struktur, till exempel att ha vissa metoder.</li><li><strong>Återanvändbarhet</strong>: Gemensam funktionalitet kan placeras i den abstrakta klassen och återanvändas av de underordnade klasserna.</li><li><strong>Organisation</strong>: Abstrakta klasser gör koden mer organiserad och läsbar när många klasser delar liknande metoder och egenskaper.</li></ul><h3 id="sammanfattning" tabindex="-1">Sammanfattning <a class="header-anchor" href="#sammanfattning" aria-label="Permalink to &quot;Sammanfattning&quot;">​</a></h3><p>Abstrakta klasser är ett kraftfullt verktyg i objektorienterad programmering som hjälper till att skapa en gemensam struktur för flera klasser. De används som mallar och kan innehålla abstrakta metoder som måste implementeras i underordnade klasser. Python tillhandahåller abc-modulen för att hantera abstrakta klasser.</p><p>Att använda abstrakta klasser leder till:</p><ul><li>Bättre struktur och organisation i koden.</li><li>Enhetlighet och konsekvens i metodimplementeringar.</li><li>Möjlighet att återanvända gemensam kod i bas- eller föräldraklassen.</li></ul><p>Genom att förstå och använda abstrakta klasser kan du bygga robusta, skalbara och välstrukturerade program i Python.</p>`,30),t=[e],h=JSON.parse('{"title":"Python Abstrakta klasser","description":"","frontmatter":{"outline":[1,6]},"headers":[],"relativePath":"programming2/part10/index.md","filePath":"programming2/part10/index.md"}'),r={name:"programming2/part10/index.md"},o=Object.assign(r,{setup(i){return(l,p)=>(s(),a("div",null,t))}});export{h as __pageData,o as default};
