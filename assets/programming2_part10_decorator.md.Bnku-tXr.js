import{c as s,o as a,a1 as n,cQ as i}from"./chunks/framework.C7ZMvz9x.js";/* empty css                                                                            */const t=n('<h1 id="python-dekorator" tabindex="-1">Python dekorator <a class="header-anchor" href="#python-dekorator" aria-label="Permalink to &quot;Python dekorator&quot;">​</a></h1><h2 id="vad-ar-en-dekorator" tabindex="-1">Vad är en dekorator <a class="header-anchor" href="#vad-ar-en-dekorator" aria-label="Permalink to &quot;Vad är en dekorator&quot;">​</a></h2><p>En dekorator i Python är <strong>ett speciellt mönster för att modifiera</strong> eller <strong>utöka beteendet hos funktioner</strong> eller metoder <strong>utan att ändra deras faktiska kod</strong>. Dekoratorer gör det möjligt att &quot;<strong>dekorera</strong>&quot; en funktion med <strong>extra funktionalitet</strong> på ett enkelt och läsbart sätt.</p><p>Dekoratorer används genom att placera ett <strong>@-tecken</strong> följt av <strong>dekoratorns namn direkt ovanför den funktion du vill dekorera</strong>.</p><p>En <strong>dekorator</strong> är i grunden en <span class="a">funktion som tar en annan funktion som argument och returnerar en ny funktion som vanligtvis innehåller extra logik</span>.</p><p><img src="'+i+`" alt=""></p><h2 id="hur-fungerar-en-dekorator" tabindex="-1">Hur fungerar en Dekorator? <a class="header-anchor" href="#hur-fungerar-en-dekorator" aria-label="Permalink to &quot;Hur fungerar en Dekorator?&quot;">​</a></h2><p>En dekorator tar en <strong>funktion som indata</strong>, <strong>modifierar</strong> eller <strong>förpackar den</strong>, och <strong>returnerar en ny funktion med samma namn</strong>.</p><p>Här är en enkel dekorator som loggar när en funktion körs:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logga</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(funktion):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Funktionen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">funktion.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> körs.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funktion()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrapper</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>I detta exempel är <em><strong>logga</strong></em> en dekorator. Den tar en <strong>funktion som indata</strong> och *<strong>returnerar</strong> en <strong>ny funktion wrapper</strong> som skriver ut en loggmeddelande innan den anropar den ursprungliga funktionen.</p><p>För att <strong>använda denna dekorator</strong> på en funktion:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@logga</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> min_funktion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Detta är min funktion!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Anropa funktionen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">min_funktion()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="vad-hander-har" tabindex="-1">Vad händer här? <a class="header-anchor" href="#vad-hander-har" aria-label="Permalink to &quot;Vad händer här?&quot;">​</a></h3><ol><li><span class="a">Dekoratorn tillämpas</span>: När vi använder <em><strong>@logga</strong></em> ovanför <em><strong>min_funktion</strong></em>, anropas <em><strong>logga(min_funktion)</strong></em>. Detta returnerar funktionen wrapper.</li><li><span class="a">Funktionen modifieras</span>: Nu är <em><strong>min_funktion</strong></em> ersatt av <em><strong>wrapper</strong></em>, vilket innebär att varje gång vi kör <em><strong>min_funktion</strong></em>, kommer koden i <em><strong>wrapper</strong></em> att köras.</li><li><span class="a">Extra funktionalitet läggs till</span>: När vi nu kör <em><strong>min_funktion()</strong></em>, skriver den först ut meddelandet &quot;<strong>Funktionen min_funktion körs.</strong>&quot;, och sedan kör den originalkoden.</li></ol><p><strong>Utdata från exemplet ovan skulle bli</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Funktionen min_funktion körs.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Detta är </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funktion!</span></span></code></pre></div><h2 id="dekoratorer-med-argument" tabindex="-1">Dekoratorer med Argument <a class="header-anchor" href="#dekoratorer-med-argument" aria-label="Permalink to &quot;Dekoratorer med Argument&quot;">​</a></h2><p>Dekoratorer kan också hantera funktioner som tar argument. Låt oss modifiera vår dekorator så att den kan hantera argument för den funktion den dekorerar:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logga</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(funktion):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Funktionen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">funktion.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> körs med argument </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> och </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funktion(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrapper</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Nu fungerar den med funktioner som tar in argument:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@logga</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addera</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Anropa funktionen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resultat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addera(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Resultat: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resultat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Utdata blir:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Funktionen addera körs med argument (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) och {}.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Resultat: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span></span></code></pre></div><h2 id="sammanfattning" tabindex="-1">Sammanfattning <a class="header-anchor" href="#sammanfattning" aria-label="Permalink to &quot;Sammanfattning&quot;">​</a></h2><p>En dekorator i Python är ett användbart verktyg för att ändra eller lägga till funktionalitet till funktioner och metoder. Det gör koden mer modulär och återanvändbar utan att behöva ändra den ursprungliga funktionen.</p><p>Dekoratorer används genom att placera <em><strong>@dekoratornamn</strong></em> direkt ovanför den funktion de ska påverka.</p>`,27),e=[t],d=JSON.parse('{"title":"Python dekorator","description":"","frontmatter":{"outline":[1,6]},"headers":[],"relativePath":"programming2/part10/decorator.md","filePath":"programming2/part10/decorator.md"}'),r={name:"programming2/part10/decorator.md"},g=Object.assign(r,{setup(l){return(p,k)=>(a(),s("div",null,e))}});export{d as __pageData,g as default};
